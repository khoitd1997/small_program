#ifndef _BARECTF_H
#define _BARECTF_H

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2020 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following code was generated by barectf v3.0.1
 * on 2021-12-30T10:31:22.055927.
 *
 * For more details, see <https://barectf.org/>.
 */

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif


struct barectf_ctx;

uint32_t barectf_packet_size(const void *vctx);
int barectf_packet_is_full(const void *vctx);
int barectf_packet_is_empty(const void *vctx);
uint32_t barectf_packet_events_discarded(const void *vctx);
uint32_t barectf_discarded_event_records_count(const void * const vctx);
uint8_t *barectf_packet_buf(const void *vctx);
uint8_t *barectf_packet_buf_addr(const void * const vctx);
void barectf_packet_set_buf(void *vctx, uint8_t *buf, uint32_t buf_size);
uint32_t barectf_packet_buf_size(const void *vctx);
int barectf_packet_is_open(const void *vctx);
int barectf_is_in_tracing_section(const void *vctx);
volatile const int *barectf_is_in_tracing_section_ptr(const void *vctx);
int barectf_is_tracing_enabled(const void *vctx);
void barectf_enable_tracing(void *vctx, int enable);

/* barectf platform callbacks */
struct barectf_platform_callbacks {
	/* Clock source callbacks */
	uint64_t (*default_clock_get_value)(void *);

	/* Is the back end full? */
	int (*is_backend_full)(void *);

	/* Open packet */
	void (*open_packet)(void *);

	/* Close packet */
	void (*close_packet)(void *);
};

/* Common barectf context */
struct barectf_ctx {
	/* Platform callbacks */
	struct barectf_platform_callbacks cbs;

	/* Platform data (passed to callbacks) */
	void *data;

	/* Output buffer (will contain a CTF binary packet) */
	uint8_t *buf;

	/* Packet's total size (bits) */
	uint32_t packet_size;

	/* Packet's content size (bits) */
	uint32_t content_size;

	/* Current position from beginning of packet (bits) */
	uint32_t at;

	/* Size of packet header + context fields (content offset) */
	uint32_t off_content;

	/* Discarded event records counter snapshot */
	uint32_t events_discarded;

	/* Current packet is open? */
	int packet_is_open;

	/* In tracing code? */
	volatile int in_tracing_section;

	/* Tracing is enabled? */
	volatile int is_tracing_enabled;

	/* Use current/last event record timestamp when opening/closing packets */
	int use_cur_last_event_ts;
};

/* Context for data stream type `kernel_stream` */
struct barectf_kernel_stream_ctx {
	/* Parent */
	struct barectf_ctx parent;

	/* Config-specific members follow */
	uint32_t off_ph_magic;
	uint32_t off_ph_uuid;
	uint32_t off_ph_stream_id;
	uint32_t off_pc_packet_size;
	uint32_t off_pc_content_size;
	uint32_t off_pc_timestamp_begin;
	uint32_t off_pc_timestamp_end;
	uint32_t off_pc_events_discarded;
	uint32_t off_pc_cpu_id;
	uint64_t cur_last_event_ts;
};

/* Context for data stream type `user_stream` */
struct barectf_user_stream_ctx {
	/* Parent */
	struct barectf_ctx parent;

	/* Config-specific members follow */
	uint32_t off_ph_magic;
	uint32_t off_ph_uuid;
	uint32_t off_ph_stream_id;
	uint32_t off_pc_packet_size;
	uint32_t off_pc_content_size;
	uint32_t off_pc_timestamp_begin;
	uint32_t off_pc_timestamp_end;
	uint32_t off_pc_events_discarded;
	uint32_t off_pc_cpu_id;
	uint64_t cur_last_event_ts;
};

/* Initialize context */
void barectf_init(void *vctx,
	uint8_t *buf, uint32_t buf_size,
	const struct barectf_platform_callbacks cbs, void *data);

/* Open packet for data stream type `kernel_stream` */
void barectf_kernel_stream_open_packet(
	struct barectf_kernel_stream_ctx *sctx,
	uint32_t pc_cpu_id);

/* Close packet for data stream type `kernel_stream` */
void barectf_kernel_stream_close_packet(struct barectf_kernel_stream_ctx *sctx);

/* Trace (data stream type `kernel_stream`, event record type `irq_handler_entry`) */
void barectf_kernel_stream_trace_irq_handler_entry(struct barectf_kernel_stream_ctx *sctx,
	int32_t p__irq,
	const char *p__name);

/* Trace (data stream type `kernel_stream`, event record type `irq_handler_exit`) */
void barectf_kernel_stream_trace_irq_handler_exit(struct barectf_kernel_stream_ctx *sctx,
	int32_t p__irq,
	int32_t p__ret);

/* Trace (data stream type `kernel_stream`, event record type `sched_switch`) */
void barectf_kernel_stream_trace_sched_switch(struct barectf_kernel_stream_ctx *sctx,
	const char *p__prev_comm,
	int32_t p__prev_tid,
	int32_t p__prev_prio,
	int64_t p__prev_state,
	const char *p__next_comm,
	int32_t p__next_tid,
	int32_t p__next_prio);

/* Trace (data stream type `kernel_stream`, event record type `sched_wakeup`) */
void barectf_kernel_stream_trace_sched_wakeup(struct barectf_kernel_stream_ctx *sctx,
	const char *p__comm,
	int32_t p__tid,
	int32_t p__prio,
	int32_t p__target_cpu);
/* Open packet for data stream type `user_stream` */
void barectf_user_stream_open_packet(
	struct barectf_user_stream_ctx *sctx,
	uint32_t pc_cpu_id);

/* Close packet for data stream type `user_stream` */
void barectf_user_stream_close_packet(struct barectf_user_stream_ctx *sctx);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_cyg_profile_func_entry`) */
void barectf_user_stream_trace_lttng_ust_cyg_profile_func_entry(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__addr,
	uint64_t p__call_site);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_cyg_profile_func_exit`) */
void barectf_user_stream_trace_lttng_ust_cyg_profile_func_exit(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__addr,
	uint64_t p__call_site);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_calloc`) */
void barectf_user_stream_trace_lttng_ust_libc_calloc(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__nmemb,
	uint64_t p__size,
	uint64_t p__ptr);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_free`) */
void barectf_user_stream_trace_lttng_ust_libc_free(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__ptr);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_malloc`) */
void barectf_user_stream_trace_lttng_ust_libc_malloc(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__size,
	uint64_t p__ptr);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_memalign`) */
void barectf_user_stream_trace_lttng_ust_libc_memalign(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__alignment,
	uint64_t p__size,
	uint64_t p__ptr);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_posix_memalign`) */
void barectf_user_stream_trace_lttng_ust_libc_posix_memalign(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__out_ptr,
	uint64_t p__alignment,
	uint64_t p__size,
	int32_t p__result);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_libc_realloc`) */
void barectf_user_stream_trace_lttng_ust_libc_realloc(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__in_ptr,
	uint64_t p__size,
	uint64_t p__ptr);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_statedump_bin_info`) */
void barectf_user_stream_trace_lttng_ust_statedump_bin_info(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	uint64_t p__baddr,
	uint64_t p__memsz,
	const char *p__path,
	uint8_t p__is_pic,
	uint8_t p__has_build_id,
	uint8_t p__has_debug_link);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_statedump_end`) */
void barectf_user_stream_trace_lttng_ust_statedump_end(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_statedump_procname`) */
void barectf_user_stream_trace_lttng_ust_statedump_procname(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname,
	const char *p__procname);

/* Trace (data stream type `user_stream`, event record type `lttng_ust_statedump_start`) */
void barectf_user_stream_trace_lttng_ust_statedump_start(struct barectf_user_stream_ctx *sctx,
	int32_t cc__vpid,
	int32_t cc__vtid,
	const char *cc__procname);

#ifdef __cplusplus
}
#endif

#endif /* _BARECTF_H */
