/* CTF 1.8 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2020 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following code was generated by barectf v3.0.1
 * on 2021-12-30T16:23:14.878590.
 *
 * For more details, see <https://barectf.org/>.
 */

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	uuid = "c61d3d36-7707-4619-95f5-dc4049b67573";
	packet.header := struct {
		integer {
			signed = false;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} magic;
		integer {
			signed = false;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
		} uuid[16];
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} stream_id;
	} align(8);
};

env {
	domain = "ust";
	tracer_name = "lttng-ust";
	tracer_major = 2;
	tracer_minor = 13;
	tracer_patch = 1;
	tracer_pre = "";
	barectf_gen_date = "2021-12-30T16:23:14.878590";
	tracer_buffering_scheme = "uid";
	tracer_buffering_id = 0;
	architecture_bit_width = 64;
	trace_name = "user_trace_session";
};

clock {
	name = default;
	freq = 1000000000;
	precision = 0;
	offset_s = 0;
	offset = 0;
	absolute = false;
};

/* Data stream type `kernel_stream` */
stream {
	id = 0;
	packet.context := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} packet_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} content_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp_begin;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp_end;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} events_discarded;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} cpu_id;
	} align(8);
	event.header := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} id;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp;
	} align(8);
};

event {
	stream_id = 0;
	id = 0;
	name = "irq_handler_entry";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _irq;
		string {
			encoding = UTF8;
		} _name;
	} align(1);
};

event {
	stream_id = 0;
	id = 1;
	name = "irq_handler_exit";
	fields := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _irq;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _ret;
	} align(1);
};

event {
	stream_id = 0;
	id = 2;
	name = "sched_switch";
	fields := struct {
		string {
			encoding = UTF8;
		} _prev_comm;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prev_tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prev_prio;
		enum : integer {
			signed = true;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} {
			"TASK_RUNNING" = 0,
			"TASK_INTERRUPTIBLE" = 1,
			"TASK_UNINTERRUPTIBLE" = 2,
			"TASK_STOPPED" = 4,
			"TASK_TRACED" = 8,
			"EXIT_DEAD" = 16,
			"EXIT_ZOMBIE" = 32,
			"TASK_PARKED" = 64,
			"TASK_DEAD" = 128,
			"TASK_WAKEKILL" = 256,
			"TASK_WAKING" = 512,
			"TASK_NOLOAD" = 1024,
			"TASK_NEW" = 2048,
			"TASK_STATE_MAX" = 4096,
		} _prev_state;
		string {
			encoding = UTF8;
		} _next_comm;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _next_tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _next_prio;
	} align(1);
};

event {
	stream_id = 0;
	id = 3;
	name = "sched_wakeup";
	fields := struct {
		string {
			encoding = UTF8;
		} _comm;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _tid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _prio;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _target_cpu;
	} align(1);
};

/* Data stream type `user_stream` */
stream {
	id = 1;
	packet.context := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} packet_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} content_size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp_begin;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp_end;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} events_discarded;
		integer {
			signed = false;
			size = 32;
			align = 32;
			byte_order = native;
			base = 10;
		} cpu_id;
	} align(8);
	event.header := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} id;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
			map = clock.default.value;
		} timestamp;
	} align(8);
	event.context := struct {
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _vpid;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _vtid;
		string {
			encoding = UTF8;
		} _procname;
	} align(1);
};

event {
	stream_id = 1;
	id = 0;
	name = "lttng_ust_cyg_profile_func_entry";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _addr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _call_site;
	} align(1);
};

event {
	stream_id = 1;
	id = 1;
	name = "lttng_ust_cyg_profile_func_exit";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _addr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _call_site;
	} align(1);
};

event {
	stream_id = 1;
	id = 2;
	name = "lttng_ust_libc_calloc";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _nmemb;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _ptr;
	} align(1);
};

event {
	stream_id = 1;
	id = 3;
	name = "lttng_ust_libc_free";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _ptr;
	} align(1);
};

event {
	stream_id = 1;
	id = 4;
	name = "lttng_ust_libc_malloc";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _ptr;
	} align(1);
};

event {
	stream_id = 1;
	id = 5;
	name = "lttng_ust_libc_memalign";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _alignment;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _ptr;
	} align(1);
};

event {
	stream_id = 1;
	id = 6;
	name = "lttng_ust_libc_posix_memalign";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _out_ptr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _alignment;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _size;
		integer {
			signed = true;
			size = 32;
			align = 8;
			byte_order = native;
			base = 10;
		} _result;
	} align(1);
};

event {
	stream_id = 1;
	id = 7;
	name = "lttng_ust_libc_realloc";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _in_ptr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _size;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _ptr;
	} align(1);
};

event {
	stream_id = 1;
	id = 8;
	name = "lttng_ust_statedump_bin_info";
	fields := struct {
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 16;
		} _baddr;
		integer {
			signed = false;
			size = 64;
			align = 8;
			byte_order = native;
			base = 10;
		} _memsz;
		string {
			encoding = UTF8;
		} _path;
		integer {
			signed = false;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
		} _is_pic;
		integer {
			signed = false;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
		} _has_build_id;
		integer {
			signed = false;
			size = 8;
			align = 8;
			byte_order = native;
			base = 10;
		} _has_debug_link;
	} align(1);
};

event {
	stream_id = 1;
	id = 9;
	name = "lttng_ust_statedump_end";
	fields := struct {
	} align(1);
};

event {
	stream_id = 1;
	id = 10;
	name = "lttng_ust_statedump_procname";
	fields := struct {
		string {
			encoding = UTF8;
		} _procname;
	} align(1);
};

event {
	stream_id = 1;
	id = 11;
	name = "lttng_ust_statedump_start";
	fields := struct {
	} align(1);
};
